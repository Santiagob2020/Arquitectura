/**
 * @file variables.h
 * @brief Declaraciones de variables y configuraciones para el sistema.
 */

#ifndef VARIABLES_H
#define VARIABLES_H

#include <Keypad.h>
#include <LiquidMenu.h>
#include "DHT.h"
#include "AsyncTaskLib.h"
#include "StateMachineLib.h"

// Definiciones de notas musicales con sus respectivas frecuencias
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

// Configuración de pines de salida
#define ledR 7
#define ledG 6
#define ledB 8
#define rs 12
#define en 11
#define d4 5
#define d5 4
#define d6 3
#define d7 2

// Configuración de pines de sensores
#define photocellPin A1
#define hallPin A0
#define dhtPin 10
#define buttonPin 9

// Configuración del sensor DHT
#define DHTTYPE DHT11 // Tipo de sensor DHT
DHT dht(dhtPin, DHTTYPE); // Inicializa el sensor DHT

// Configuración de la pantalla LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Configuración de la máquina de estados
StateMachine stateMachine(6, 13);

// Configuración del teclado (keypad)
#define ROWS 4
#define COLS 4
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {22, 24, 26, 28}; // Pines de las filas del teclado
byte colPins[COLS] = {30, 32, 34, 36}; // Pines de las columnas del teclado
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Definición de las transiciones y estados de la máquina de estados
enum Input {
  correctPassword = 0,
  button = 1,
  timeOut7 = 2,
  timeOut10 = 3,
  timeOut3 = 4,
  timeOut4 = 5,
  tempHigh = 6,
  lightHigh = 7,
  hallHigh = 8,
  sysBlock = 9,
  unknow = 10
};

enum State {
  start=0,
  config=1,
  monitorAmbiental=2,
  monitorEvents=3,
  alarm=4,
  block=5
};

// Variables globales de acceso
Input input;

// Límites de lectura
int maxTemp = 40;
int minTemp = 0;
int maxLight= 300;
int minLight= 0;
int maxHall = 1000;

// Tareas asíncronas
void loopS();
void again();
void limpiarclave();
AsyncTask taskLoop(1, true, loopS);
AsyncTask taskAgain(2000, false, again);
AsyncTask taskStopLoop(1, false, [] () { taskLoop.Stop();} );

// Tareas asíncronas de monitores
void printMonitorAmbiental();
void printMonitorHall();
AsyncTask taskLoopMonitorAmbiental(100, true, printMonitorAmbiental);
AsyncTask taskLoopMonitorHall(100, true, printMonitorHall);

// Tareas de liquidMenu
void loopLiquidMenu();
AsyncTask taskLoopMenu(100, true, loopLiquidMenu);

// Configuración de tareas asíncronas de transición y su respectiva actualización
AsyncTask taskCorrect(2000, false, [](){ input = Input::correctPassword;});
AsyncTask taskSysBlock(10, false, [] () {input = Input::sysBlock;});
AsyncTask taskTimeOut7(7000, false, [](){input = Input::timeOut7;});
AsyncTask taskTimeOut3(3000, false, [](){input = Input::timeOut3;});
AsyncTask taskTimeOut4(100, false, [](){input = Input::timeOut4;});
AsyncTask taskTimeOut10(100, false, []() { input = Input::timeOut10; });
AsyncTask taskButton(10, false, [] () { input = Input::button;});
AsyncTask taskTempHigh(5, false, [](){ input = Input::tempHigh;});
AsyncTask taskLightHigh(5, false, [](){ input = Input::lightHigh;});
AsyncTask taskHallHigh(5, false, [](){ input = Input::hallHigh;});

// Tareas de actualización de estado
void updateTask(){
  taskTimeOut10.Update();
  taskLoop.Update();
  taskAgain.Update();
  taskCorrect.Update();
  taskStopLoop.Update();
  taskSysBlock.Update();
  taskLoopMonitorAmbiental.Update();
  taskTimeOut7.Update();
  taskTimeOut3.Update();
  taskButton.Update();
  taskLoopMonitorHall.Update();
  taskTimeOut4.Update();
  taskButton.Update();
  taskTempHigh.Update();
  taskLightHigh.Update();
  taskHallHigh.Update();
  taskLoopMenu.Update();
}

#endif

int tempo = 60; ///< Tempo de la melodía

// Pin del buzzer
int buzzer = 13;

// Notas de las melodías seguidas de su duración
int buzzerBlock[] = {
  NOTE_DS8,-4
};
int buzzerAlarm[] = {
  NOTE_AS7,8,NOTE_D8,8
};
int buzzerBoton[] = {
  NOTE_C3,8
};

// Calcula la duración de una nota completa en ms (60s/tempo)*4 beats
int wholenote = (60000 * 4) / tempo;

/**
 * @brief Función para reproducir una melodía.
 * 
 * @param melody Arreglo de enteros que representa la melodía (notas y duraciones).
 * @param notes Número de notas en la melodía.
 */
void playMelody(int melody[], int notes) {
  int wholenote = (60000 * 4) / tempo;
  int divider = 0, noteDuration = 0;

  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
    divider = melody[thisNote + 1];
    if (divider > 0) {
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // Notas con puntillo
    }

    tone(buzzer, melody[thisNote], noteDuration * 0.9);
    delay(noteDuration);
    noTone(buzzer);
  }
}
