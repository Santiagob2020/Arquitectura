/**
 * @file StateMachineLib.cpp
 * @brief Implementación de la librería de Máquina de Estados.
 */

#include "StateMachineLib.h"

/**
 * @brief Constructor de la clase StateMachine.
 * 
 * @param numStates Número de estados en la máquina de estados.
 * @param numTransitions Número de transiciones en la máquina de estados.
 */
StateMachine::StateMachine(uint8_t numStates, uint8_t numTransitions)
{
    _numStates = numStates;
    _numTransitions = numTransitions;

    _states = new State[numStates];
    _transitions = new Transition[numTransitions];

    initVariables();
}

/**
 * @brief Añade una transición entre estados sin acción asociada.
 * 
 * @param inputState Estado de entrada de la transición.
 * @param outputState Estado de salida de la transición.
 * @param condition Condición que debe cumplirse para realizar la transición.
 * @return Índice de la transición añadida.
 */
uint8_t StateMachine::AddTransition(uint8_t inputState, uint8_t outputState, StateMachineCondition condition)
{
    return AddTransition(inputState, outputState, condition, nullptr);
}

/**
 * @brief Añade una transición entre estados con una acción asociada.
 * 
 * @param inputState Estado de entrada de la transición.
 * @param outputState Estado de salida de la transición.
 * @param condition Condición que debe cumplirse para realizar la transición.
 * @param action Acción a ejecutar durante la transición.
 * @return Índice de la transición añadida.
 */
uint8_t StateMachine::AddTransition(uint8_t inputState, uint8_t outputState, StateMachineCondition condition, StateMachineAction action)
{
    if (_currentTransitionIndex >= _numTransitions) return _currentTransitionIndex;

    SetTransition(_currentTransitionIndex, inputState, outputState, condition, action);

    return _currentTransitionIndex++;
}

/**
 * @brief Configura una transición sin acción asociada.
 * 
 * @param transition Índice de la transición.
 * @param inputState Estado de entrada de la transición.
 * @param outputState Estado de salida de la transición.
 * @param condition Condición que debe cumplirse para realizar la transición.
 */
void StateMachine::SetTransition(uint8_t transition, uint8_t inputState, uint8_t outputState, StateMachineCondition condition)
{
    SetTransition(transition, inputState, outputState, condition, nullptr);
}

/**
 * @brief Configura una transición con una acción asociada.
 * 
 * @param transition Índice de la transición.
 * @param inputState Estado de entrada de la transición.
 * @param outputState Estado de salida de la transición.
 * @param condition Condición que debe cumplirse para realizar la transición.
 * @param action Acción a ejecutar durante la transición.
 */
void StateMachine::SetTransition(uint8_t transition, uint8_t inputState, uint8_t outputState, StateMachineCondition condition, StateMachineAction action)
{
    _transitions[transition].InputState = inputState;
    _transitions[transition].OutputState = outputState;
    _transitions[transition].Condition = condition;
    _transitions[transition].Action = action;
}

/**
 * @brief Elimina la condición de una transición.
 * 
 * @param state Índice de la transición.
 */
void StateMachine::RemoveTransition(uint8_t state)
{
    _transitions[state].Condition = nullptr;
}

/**
 * @brief Configura una acción al entrar en un estado.
 * 
 * @param state Índice del estado.
 * @param action Acción a ejecutar al entrar en el estado.
 */
void StateMachine::SetOnEntering(uint8_t state, StateMachineAction action)
{
    _states[state].OnEntering = action;
}

/**
 * @brief Configura una acción al salir de un estado.
 * 
 * @param state Índice del estado.
 * @param action Acción a ejecutar al salir del estado.
 */
void StateMachine::SetOnLeaving(uint8_t state, StateMachineAction action)
{
    _states[state].OnLeaving = action;
}

/**
 * @brief Elimina la acción al entrar en un estado.
 * 
 * @param state Índice del estado.
 */
void StateMachine::ClearOnEntering(uint8_t state)
{
    _states[state].OnEntering = nullptr;
}

/**
 * @brief Elimina la acción al salir de un estado.
 * 
 * @param state Índice del estado.
 */
void StateMachine::ClearOnLeaving(uint8_t state)
{
    _states[state].OnLeaving = nullptr;
}

/**
 * @brief Cambia el estado actual de la máquina de estados.
 * 
 * @param state Índice del nuevo estado.
 * @param launchLeaving Indica si se debe ejecutar la acción al salir del estado actual.
 * @param launchEntering Indica si se debe ejecutar la acción al entrar en el nuevo estado.
 */
void StateMachine::SetState(uint8_t state, bool launchLeaving, bool launchEntering)
{
    if (launchLeaving && _states[_currentStateIndex].OnLeaving != nullptr) _states[_currentStateIndex].OnLeaving();
    if (launchEntering && _states[state].OnEntering != nullptr) _states[state].OnEntering();

    _currentStateIndex = state;
}

/**
 * @brief Obtiene el estado actual de la máquina de estados.
 * 
 * @return Índice del estado actual.
 */
uint8_t StateMachine::GetState() const
{
    return _currentStateIndex;
}

/**
 * @brief Actualiza la máquina de estados, verificando las condiciones de transición.
 * 
 * @return true si se realizó una transición, false en caso contrario.
 */
bool StateMachine::Update()
{
    for (int transitionIndex = 0; transitionIndex < _numTransitions; transitionIndex++)
    {
        if (_transitions[transitionIndex].InputState == _currentStateIndex)
        {
            if (_transitions[transitionIndex].Condition != nullptr && _transitions[transitionIndex].Condition())
            {
                SetState(_transitions[transitionIndex].OutputState, true, true);
                return true;
            }
        }
    }
    return false;
}

/**
 * @brief Inicializa las variables de la máquina de estados.
 */
void StateMachine::initVariables()
{
    _currentStateIndex = 0;
    _currentTransitionIndex = 0;
    for (int stateIndex = 0; stateIndex < _numStates; stateIndex++)
    {
        _states[stateIndex].OnEntering = nullptr;
        _states[stateIndex].OnLeaving = nullptr;
    }

    for (int transitionIndex = 0; transitionIndex  < _numTransitions; transitionIndex++)
    {
        _transitions[transitionIndex].Condition = nullptr;
        _transitions[transitionIndex].Action = nullptr;
    }
}
